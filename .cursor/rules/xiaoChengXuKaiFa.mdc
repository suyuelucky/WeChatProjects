---
description: 微信小程序开发规范与注意事项
globs: 
alwaysApply: true
---
# 微信小程序开发强制规范

> **重要声明**：本规范中的所有规则均为【强制执行】要求，AI助手必须无条件遵守，不得以任何理由违反或忽略。违反规则将导致严重的兼容性、性能和安全问题。

## 特别注意：
- 当前项目使用ES模块（type: "module"）

## 一、基础兼容性与文件规范

### 1.1 JavaScript兼容性（严格强制）
- **禁止使用**: ES6+高级特性，包括Proxy、Symbol、Generator、async/await等
- **禁止使用**: 箭头函数(=>)、解构赋值、扩展运算符(...)、模板字符串(`${}`)
- **必须执行**: 所有代码必须经过微信开发者工具压缩测试，并确保无"js压缩未通过"错误
- **必须执行**: 使用微信开发者工具的"ES6转ES5"功能并确保转换后代码正常运行

### 1.2 文件完整性（不可违反）
- **TypeScript开发**: 必须同时生成并提交.js文件，确保编译后代码存在且正确
- **每次修改后**: 必须立即编译验证.js文件是否正确生成
- **编译检查**: 确保编译后的JS代码符合ES5标准，通过压缩测试

### 1.3 代码压缩兼容性（必须遵守）
- **提交前检查**: 每次提交前必须执行压缩测试确保代码可用于生产环境
- **禁止使用**: 微信小程序环境不支持的第三方库
- **必须修复**: 任何可能导致压缩失败的语法错误和循环引用

## 二、项目结构与资源管理

### 2.1 目录结构规范（不可违反）
- **严格遵循**: 微信小程序标准目录结构，不得创建非标准目录
- **组件文件完整性**: 每个组件必须包含四个完整文件（js/ts、wxml、wxss、json）
- **目录分类**: 页面必须放在pages目录，组件必须放在components目录
- **资源隔离**: 公共样式和工具函数必须放入独立目录管理
- **就近原则**: 组件相关资源必须放在同一目录下

### 2.2 资源路径管理（强制执行）
- **路径引用**: 所有资源引用必须使用相对路径，严禁使用绝对路径
- **路径验证**: 每个路径必须在开发工具和真机环境双重验证
- **注册完整性**: 必须在app.json和页面json中正确注册所有页面和组件
- **路径优化**: 避免使用过长的相对路径，必须使用别名或公共路径管理

## 三、API与数据处理

### 3.1 微信API使用规范（严格遵守）
- **版本确认**: 每使用一个微信API前，必须查阅官方文档确认最低支持版本
- **降级方案**: 对可能不兼容的API必须提供完整的降级方案
- **异步处理**: 必须按照官方文档正确处理API的异步回调，禁止回调嵌套超过3层
- **错误处理**: 所有API调用必须实现完整的错误捕获和处理机制

### 3.2 全局状态管理（强制要求）
- **避免全局变量**: 禁止过度使用全局变量，必须优先使用Page、Component的data
- **状态管理模式**: 全局状态必须使用统一的状态管理模式进行维护
- **状态追踪**: 全局状态变更必须有明确的追踪机制，严禁任意修改
- **封装操作**: 禁止直接修改全局对象，必须使用封装的方法操作全局状态

### 3.3 数据安全（绝对不可违反）
- **敏感数据存储**: 严禁将敏感数据存储在本地storage中
- **前端逻辑限制**: 禁止在前端进行关键业务逻辑判断，必须在服务端执行
- **数据传输安全**: 传输敏感数据时必须使用加密措施，禁止明文传输
- **日志安全**: 严禁在日志中输出任何用户敏感信息

## 四、性能与优化

### 4.1 性能优化规范（必须执行）
- **setData限制**: 禁止频繁调用setData，特别是大数据量更新时
- **条件渲染控制**: 使用wx:if和wx:for时必须添加适当的条件控制
- **资源优化**: 所有图片资源必须经过压缩优化，禁止使用超过100KB的图片文件
- **加载策略**: 必须实现懒加载和按需加载策略
- **组件嵌套**: 严格限制组件嵌套层级不超过5层

### 4.2 分包加载配置（强制执行）
- **包大小控制**: 必须控制单包大小不超过2MB，主包不超过1MB
- **资源分配**: 公共资源和组件必须放入主包，非核心功能必须放入分包
- **预下载策略**: 必须使用分包预下载提升用户体验
- **动态加载**: 必须实现分包资源的动态加载，禁止一次性加载全部资源

## 五、交互与生命周期

### 5.1 事件绑定规范（必须遵循）
- **命名规范**: 事件绑定函数必须使用handle前缀（例如：handleTap）
- **逻辑分离**: 禁止在WXML中使用复杂表达式，所有逻辑必须放在JS中处理
- **事件冒泡**: 必须防止事件冒泡导致的重复触发问题
- **长列表优化**: 长列表中的事件绑定必须使用事件委托优化性能

### 5.2 小程序生命周期管理（严格执行）
- **资源释放**: 必须在onHide/onUnload中清理所有定时器、监听器等资源
- **内存泄漏**: 严格防止内存泄漏，每个页面离开时必须释放所有占用资源
- **页面栈管理**: 必须合理利用页面栈管理，严禁页面层级超过10层
- **数据预加载**: 必须利用页面生命周期函数提前准备数据，优化用户体验

### 5.3 自定义组件通信规范（强制遵守）
- **通信方式**: 组件间通信必须使用properties和事件，禁止直接操作父/子组件
- **方法暴露**: 自定义组件必须明确声明所有对外暴露的方法和属性
- **文档完整性**: 复杂组件必须提供完整的使用文档，包括所有参数说明
- **数据流向**: 必须遵循单向数据流原则，禁止双向绑定

## 六、适配与兼容

### 6.1 平台特性适配（必须执行）
- **响应式布局**: 必须使用响应式布局适配不同设备尺寸，严禁使用固定像素值
- **特殊机型适配**: 必须为特殊机型(如iPhone刘海屏)做额外适配处理
- **单位使用**: 必须使用rpx单位实现响应式布局，禁止直接使用px
- **安全区域**: 必须使用safearea确保界面在异形屏上正确显示

### 6.2 版本更新与兼容（严格要求）
- **更新流程测试**: 每次发布前必须完整测试版本更新流程
- **向下兼容**: 必须为破坏性变更提供向下兼容方案，禁止直接中断旧版本功能
- **版本检测**: 必须实现版本检测和提示用户更新的机制
- **数据迁移**: 数据结构变更时必须提供完整的数据迁移方案

## 七、开发流程与测试

### 7.1 微信开发者工具使用规范（必须遵守）
- **真机测试**: 严禁过度依赖模拟器测试结果，必须在真机环境验证所有功能
- **环境差异**: 必须了解并处理模拟器与真机的差异，特别是API兼容性问题
- **编译选项**: 必须开启"ES6转ES5"、"增强编译"等功能确保代码兼容性
- **工具更新**: 必须定期更新开发者工具到最新版本，保持与微信平台同步

### 7.2 调试与测试（强制执行）
- **调试日志**: 开发过程中必须启用详细调试日志，记录关键操作
- **真机验证**: 每个功能点完成后必须立即在真机环境测试验证
- **多机型测试**: 必须在至少3种不同机型和系统版本下测试所有功能
- **自动化测试**: 必须开发自动化测试用例验证核心功能，禁止仅依赖手动测试

### 7.3 登录与授权管理（不可违反）
- **最小授权**: 必须遵循最小授权原则，严禁申请非必要的用户信息
- **登录态管理**: 必须实现完整的登录态管理和定期刷新机制
- **授权引导**: 必须提供清晰的授权引导，避免用户因拒绝授权导致功能不可用
- **拒绝授权处理**: 必须正确处理用户拒绝授权的场景，提供备选方案

## 八、代码质量与文档

### 8.1 错误处理机制（必须严格执行）
- **API错误捕获**: 所有API调用必须实现完整的错误捕获机制
- **Promise处理**: 所有Promise必须包含catch处理，禁止未处理的Promise异常
- **网络请求处理**: 所有网络请求必须处理超时和失败情况，包括重试逻辑
- **错误提示**: 所有关键操作必须提供用户友好的错误提示
- **全局异常**: 必须实现全局的未捕获异常处理机制

### 8.2 网络请求管理（强制要求）
- **请求封装**: 必须统一封装网络请求，包含完整的token失效、重试等逻辑
- **请求优化**: 必须实现请求合并和缓存机制，避免重复请求
- **并发控制**: 必须实现请求队列管理，严格控制并发请求数量
- **网络状态处理**: 必须监控网络状态变化，提供友好提示和恢复机制

### 8.3 代码注释与文档（必须执行）
- **关键逻辑注释**: 所有关键业务逻辑和复杂算法必须有详细注释
- **异步操作说明**: 所有异步操作和回调嵌套必须特别注明执行流程
- **文档一致性**: 组件和API使用文档必须及时更新并保持一致
- **注释风格**: 必须使用统一的注释风格和文档格式，便于团队协作

## 注意事项

1. 本规范中的所有规则均为**强制执行**要求，不得以任何理由降低标准或违反规则。
2. 违反规范的代码将导致严重后果，包括但不限于：审核不通过、线上崩溃、用户数据泄露等。
3. 遇到任何技术难题，必须按照规范要求寻求解决方案，禁止通过降低标准"曲线救国"。
4. AI助手必须在每次开发任务中严格遵循本规范，不得有任何忽略或遗漏。