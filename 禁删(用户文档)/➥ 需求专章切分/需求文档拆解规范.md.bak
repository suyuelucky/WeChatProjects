# 需求文档拆解规范

## 使用指南

本规范提供了将自然语言需求文档转换为结构化功能点列表的系统方法。以下是使用本规范的简要指南：

1. **快速调用模板**：
   ```
   请使用《需求文档拆解规范》将[文档路径]拆解为功能点列表，需关注[特定技术平台]的实现考虑。
   ```

2. **按需加载章节**：可根据具体情况选择性调用本规范中的相关章节，例如：
   ```
   请参考《需求文档拆解规范》的"功能点提取方法"一节，帮我从以下需求中提取功能点...
   ```

3. **功能适用性**：本规范特别适用于复杂、非结构化需求文档的分解，如产品需求文档、用户故事、业务场景描述等。

## 关键章节索引

| 章节 | 主要内容 | 使用场景 |
|------|---------|---------|
| [3.2 功能点提取方法](#32-功能点提取方法) | 动词识别法、场景分解法、MECE原则、界面元素映射 | 需要从文本中识别具体功能点 |
| [4.1 技术可行性评估](#41-技术可行性评估) | 高/中/低可行性标准、评估维度 | 评估功能点实现难度和风险 |
| [5.1 标准输出格式](#51-标准输出格式) | 表格结构、列定义、内容要求 | 格式化输出拆解结果 |
| [6.1 微信小程序特殊考虑](#61-微信小程序特殊考虑) | 平台限制、云端划分、兼容性、性能优化 | 微信小程序开发项目 |
| [6.2 微信小程序功能兼容性检查节点](#62-微信小程序功能兼容性检查节点) | 网络请求、文件操作、媒体处理、前端渲染、数据存储限制 | 功能点技术可行性精确评估 |
| [8.1 功能粒度控制](#81-功能粒度控制) | 适当粒度、判断标准、拆分与合并 | 调整功能点划分粒度 |
| [9. 操作步骤示例](#九操作步骤示例) | 从文档读取到质量检查的完整步骤，包含微信小程序兼容性检查 | 快速上手规范使用 |

## 一、概述

> **核心要点**：本规范建立了一套系统化方法，将业务语言的需求转换为技术语言的功能点列表，作为开发团队的实施指南。重点关注完整覆盖需求、技术可行性评估和实现建议。

本规范用于指导将自然语言形式的需求文档拆解为结构化的功能点列表，适用于产品需求文档到技术实现文档的转换过程。通过本规范指导的拆解过程，可以将用户故事和业务场景转化为开发人员可执行的功能点清单，并提供技术可行性评估、实现组件和技术选型建议。

## 二、拆解目标

> **核心要点**：拆解的五大目标是完整性(100%覆盖)、结构化(有序组织)、技术导向(实用性强)、可行性评估(实现难度)和实施指导(具体方案)。

1. **完整性**：100%覆盖原始需求文档中的所有明确和隐含功能点
2. **结构化**：将非结构化需求转化为结构良好的功能点列表
3. **技术导向**：将业务语言转化为技术语言，便于开发人员理解和实现
4. **可行性评估**：对每个功能点提供技术可行性评估
5. **实施指导**：为每个功能点提供技术实现建议

## 三、拆解过程

> **核心要点**：拆解过程包括宏观阅读、深入解析和方法论应用，关键是通过动词识别法、场景分解、MECE原则和界面元素映射来系统化提取功能点。

### 3.1 文档阅读与理解

> **核心要点**：先整体把握需求全貌，再细化理解各部分，最后建立功能结构关系，避免遗漏关键点和隐含需求。

1. **宏观把握**
   - 通读全文，理解系统整体目标和核心功能
   - 识别文档结构，划分主要功能模块
   - 提取关键概念和业务术语

2. **深度阅读**
   - 逐章节详细阅读
   - 标记所有描述用户行为的动词短语
   - 识别所有系统响应和处理逻辑
   - 提取场景示例中隐含的功能需求

3. **结构化理解**
   - 建立功能层次结构图
   - 识别功能间的依赖关系
   - 区分核心功能和辅助功能

### 3.2 功能点提取方法

> **核心要点**：四种主要提取方法互为补充，动词识别找行为，场景分解找流程，MECE原则确保全面不重复，界面元素映射补充交互细节。

1. **动词识别法**
   - 关注文档中的行为动词（如"创建"、"编辑"、"上传"、"分享"等）
   - 每个动词通常对应一个独立功能点
   - 组合相关动词形成功能群组

2. **场景分解法**
   - 将用户场景分解为步骤序列
   - 每个步骤通常对应一个或多个功能点
   - 识别场景中未明确但必需的辅助功能

3. **MECE原则**（相互独立，完全穷尽）
   - 确保功能点之间不重叠
   - 检查是否完整覆盖所有需求
   - 按功能域进行系统分类

4. **界面元素映射**
   - 从UI描述中提取功能点
   - 每个交互元素通常对应一个功能
   - 识别布局和展示相关的功能需求

### 3.3 功能点分类体系

> **核心要点**：将功能点分为五大类别：核心业务(主要价值)、辅助支持(提升体验)、系统管理(配置权限)、数据处理(采集分析)和用户界面(展示交互)，便于系统化管理。

根据功能性质，将提取的功能点分类为以下几类：

1. **核心业务功能**
   - 直接支持主要业务流程的功能
   - 用户直接感知和使用的功能
   - 系统的主要价值所在

2. **辅助支持功能**
   - 支持核心功能运行的辅助功能
   - 提升用户体验的便捷功能
   - 系统运行必需但非核心的功能

3. **系统管理功能**
   - 配置和管理类功能
   - 权限和角色管理
   - 系统维护相关功能

4. **数据处理功能**
   - 数据采集、验证功能
   - 数据分析和转换功能
   - 数据存储和检索功能

5. **用户界面功能**
   - 展示和交互相关功能
   - 布局和导航功能
   - 反馈和提示功能

## 四、技术分析与评估

> **核心要点**：每个功能点需从可行性(高中低)和技术实现(组件、方案、建议)两方面评估，确保技术落地有据可依。

### 4.1 技术可行性评估

> **核心要点**：三级可行性评估体系，高(标准方案)、中(定制开发)、低(创新研发)，从实现路径、风险和周期评价功能点的技术难度。

对每个功能点进行技术可行性评估，评级标准如下：

1. **高可行性**
   - 使用标准组件或API可直接实现
   - 有成熟的技术方案和明确的实现路径
   - 开发周期短，技术风险低

2. **中等可行性**
   - 需要定制开发但有相似实现案例
   - 技术方案存在一定不确定性
   - 开发周期一般，存在一定技术风险

3. **低可行性**
   - 需要复杂的研发或创新性解决方案
   - 技术方案存在显著不确定性
   - 开发周期长，技术风险高

### 4.2 组件与技术选型

> **核心要点**：为每个功能点提供具体实现路径，包括组件(职责边界)、技术(API调用)和实施建议(注意事项)，确保开发有明确指引。

为每个功能点提供以下技术实现信息：

1. **实现组件**
   - 推荐使用的组件或模块名称
   - 组件的主要职责和功能范围
   - 组件间的交互和依赖关系

2. **技术方案**
   - 推荐的技术栈或框架
   - 具体API或函数调用
   - 实现方法和模式

3. **实施建议**
   - 开发过程中的注意事项
   - 性能和安全考虑
   - 优化和扩展建议

## 五、拆解结果输出格式

> **核心要点**：标准化输出格式确保拆解结果的一致性和可读性，表格布局(5列)和分组展示相结合，便于开发团队理解和实现。

### 5.1 标准输出格式

> **核心要点**：五列表格结构是标准输出格式，包括功能点(原子化)、技术可行性(高中低)、组件(命名规范)、技术(具体API)和建议(注意事项)。

拆解结果应以结构化表格形式输出，包含以下列：

| 功能点 | 技术可行性 | 组件 | 需用技术 | 其它建议 |
|-------|-----------|-----|---------|---------|

各列说明：

1. **功能点**：
   - 简明扼要描述功能
   - 使用主语+谓语+宾语结构
   - 功能点应足够原子化，一个功能点对应一个具体能力

2. **技术可行性**：
   - 标记为"高"、"中"、"低"
   - 基于当前技术栈和团队能力评估
   - 标记低可行性项须提供替代方案

3. **组件**：
   - 建议的组件或模块名称
   - 使用符合项目命名规范的名称
   - 体现组件的主要职责

4. **需用技术**：
   - 实现该功能所需的具体技术
   - 包括框架、库、API等
   - 以逗号分隔多个技术项

5. **其它建议**：
   - 实现过程中的注意事项
   - 优化建议
   - 潜在风险提示

### 5.2 功能分组展示

> **核心要点**：功能点按照逻辑分组展示，用标题层级表示模块关系，同时添加跨功能的技术注意事项，提高整体可读性。

1. **使用标题分组**
   - 使用二级标题（##）标识主要功能模块
   - 使用三级标题（###）标识子功能组
   - 相关功能点放在一起，便于理解和实现

2. **功能间的逻辑关系**
   - 功能应按照逻辑顺序排列
   - 先核心功能，后辅助功能
   - 体现功能间的依赖关系

3. **技术注意事项汇总**
   - 在每个主要功能模块后添加技术注意事项
   - 包括跨功能的技术考虑
   - 特殊平台限制和解决方案

## 六、特定平台考虑因素

> **核心要点**：针对特定平台(如微信小程序)的额外考虑，确保功能点的技术实现方案符合平台限制和最佳实践。

### 6.1 微信小程序特殊考虑

> **核心要点**：微信小程序开发需特别关注六大方面：平台限制(替代方案)、客户端/云端划分、JS兼容性、UI组件限制、API支持检查和性能优化。

1. **平台局限性评估**
   - 检查每个功能点是否受微信小程序限制
   - 调整不适合在小程序实现的功能
   - 为受限功能提供替代方案

2. **客户端与云端划分**
   - 明确标识哪些功能在客户端实现
   - 明确标识哪些功能需要云函数支持
   - 提供客户端与云端交互方案

3. **JavaScript兼容性**
   - 避免使用ES6+不兼容特性
   - 考虑微信小程序JS运行环境限制
   - 标记需要特殊处理的JavaScript功能

4. **UI组件局限性**
   - 遵循微信小程序UI设计规范
   - 避免使用微信不支持的UI交互模式
   - 为复杂UI提供微信可行的替代方案

5. **API支持检查**
   - 验证功能点依赖的API在微信环境中是否支持
   - 提供API兼容性处理方案
   - 针对不同微信版本提供降级方案

6. **性能考虑**
   - 标记对内存和性能有较高要求的功能
   - 提供小程序环境下的性能优化建议
   - 考虑微信小程序包大小限制

### 6.2 微信小程序功能兼容性检查节点

> **核心要点**：五大功能类型的具体兼容性检查指南：网络请求、文件操作(体积限制)、媒体处理(仅官方API)、前端渲染(Canvas限制)和数据存储(存储上限)，提供每类功能的可行性判断标准。

在功能点拆解过程中，应特别注意以下微信小程序功能兼容性检查点：

1. **网络请求与通信限制**
   - 只允许访问已在管理后台配置的域名白名单
   - WebSocket连接数限制（同时最多2个）
   - 请求超时无法自定义超过60秒
   - 检查点：功能是否依赖非白名单域名或大量并发请求

2. **文件与存储操作限制**
   - 本地存储空间限制（localStorage上限10MB）
   - 单个文件上传限制（单个文件不超过10MB）
   - 文件保存目录限制（只能保存到特定目录）
   - 检查点：功能是否涉及大容量文件处理或超限本地存储

3. **媒体处理与交互限制**
   - 摄像头和相册调用必须使用微信官方API
   - 录音、视频录制时长和质量限制
   - 不支持自定义摄像头滤镜和高级处理
   - 检查点：功能是否需要高级媒体处理能力或自定义相机功能

4. **前端渲染与计算限制**
   - Canvas性能限制（复杂绘制可能导致卡顿）
   - 不支持WebGL或高级图形处理库
   - 界面层级嵌套不宜超过5层
   - 检查点：功能是否依赖复杂动画或高性能图形处理

5. **数据存储与数据库限制**
   - 云数据库单次查询有限制（默认20条）
   - 云函数单次执行时长限制（默认20秒）
   - 订阅消息数量和频率限制
   - 检查点：功能是否依赖大数据量处理或长时间运算

6. **兼容性判断流程**
   1. 识别功能点的核心技术需求
   2. 查阅最新官方文档确认限制条件
   3. 评估功能点是否超出限制范围
   4. 若超出限制，标记为"低可行性"并提供替代方案
   5. 若临界，标记为"中等可行性"并详细说明实现条件

## 七、拆解执行流程

> **核心要点**：六步拆解执行流程：文档加载→系统阅读→功能提取→可行性分析→输出文档→质量检查，确保拆解过程的系统性和结果的质量。

1. **需求文档加载**
   - 获取并打开需求文档
   - 确认文档完整性
   - 初步识别文档结构

2. **系统性阅读**
   - 按照3.1节的方法进行文档阅读
   - 创建功能结构图
   - 形成功能分类列表

3. **功能点提取**
   - 使用3.2节的方法提取功能点
   - 确保功能点粒度适中
   - 检查功能点覆盖率

4. **技术可行性分析**
   - 逐一评估每个功能点的技术可行性
   - 标记技术风险点
   - 提供实现建议

5. **输出格式化文档**
   - 按照第五章描述的格式输出结果
   - 分段创建以避免工作丢失
   - 检查格式一致性

6. **质量检查**
   - 对照原始需求验证覆盖率
   - 确保所有功能点说明清晰
   - 验证技术建议的准确性

## 八、实用提示与最佳实践

> **核心要点**：实用建议集中在功能粒度控制、常见挑战解决和团队协作三方面，解决拆解过程中的实际问题。

### 8.1 功能粒度控制

> **核心要点**：功能点粒度控制的黄金法则：不要过大(多功能混合)也不要过小(过度分割)，以"单独实现测试"为判断标准，适当合并和拆分。

1. **适当粒度**
   - 功能点不应过大（一个功能点包含多个独立功能）
   - 功能点不应过小（导致功能点数量过多）
   - 一个功能点应对应一个独立可测试的能力

2. **判断标准**
   - 功能点能够被单独实现和测试
   - 功能点有明确的输入和输出
   - 功能点能被一个开发者在合理时间内完成

3. **拆分与合并**
   - 对过大功能点进行拆分，确保每个子功能独立完整
   - 对关联紧密的小功能点进行合并，减少不必要的复杂性
   - 保持功能点之间的逻辑关系清晰

### 8.2 解决常见挑战

> **核心要点**：针对四类常见挑战的应对策略：需求模糊(标记并确认)、隐含需求(场景推导)、冲突需求(权衡分析)和技术限制(替代方案)。

1. **需求模糊处理**
   - 标记需求中模糊不清的部分
   - 提供多种可能的解释和实现方案
   - 建议与产品经理或用户确认

2. **隐含需求挖掘**
   - 基于用户场景推断必要但未明确的功能点
   - 通过依赖分析识别隐含需求
   - 将隐含需求标记为"推导需求"，便于确认

3. **冲突需求协调**
   - 识别需求之间的冲突点
   - 提供权衡分析和解决方案
   - 建议与相关方确认优先级和取舍

4. **技术限制应对**
   - 识别受技术限制的功能点
   - 提供可行的替代方案
   - 明确替代方案的优缺点和实现成本

### 8.3 后续行动与协作

> **核心要点**：拆解后的团队协作环节：与产品团队确认需求准确性，与开发团队优化技术方案，持续迭代改进拆解结果，保持文档与需求同步。

1. **与产品团队协作**
   - 分享拆解结果并获取反馈
   - 澄清模糊需求和隐含需求
   - 确认功能优先级和实现范围

2. **与开发团队协作**
   - 讨论技术实现方案
   - 调整技术可行性评估
   - 完善组件和技术选型

3. **拆解结果迭代**
   - 基于反馈持续改进拆解结果
   - 更新技术方案和可行性评估
   - 同步产品需求变更

## 九、操作步骤示例

> **核心要点**：七步操作流程示例，从文档读取到质量检查的完整演示，提供即拿即用的操作模板，便于快速上手。

以下是将需求文档拆解为功能点列表的操作步骤示例：

### 步骤1：读取需求文档

```
请阅读"/path/to/需求文档.md"，将全文切成一个个最小功能点
```

### 步骤2：分析需求结构

```
首先对文档结构进行分析，提取主要功能模块：
1. 模块A：...
2. 模块B：...
3. 模块C：...
```

### 步骤3：提取功能点

```
从模块A开始提取功能点：
- 功能点A1：...
- 功能点A2：...
- 功能点A3：...
```

### 步骤4：技术分析

```
对每个功能点进行技术可行性分析：
- 功能点A1：高可行性，可使用组件X实现
- 功能点A2：中等可行性，需定制开发
- 功能点A3：低可行性，建议使用替代方案...
```

### 步骤5：创建输出文档

```
创建功能点分解文档：
# 功能点分解

| 功能点 | 技术可行性 | 组件 | 需用技术 | 其它建议 |
|-------|-----------|-----|---------|---------|
| 功能点A1 | 高 | 组件X | 技术1,技术2 | 建议... |
| 功能点A2 | 中 | 组件Y | 技术3 | 注意... |
...
```

### 步骤6：微信小程序兼容性检查

```
专项检查功能点在微信小程序环境中的兼容性：

1. 媒体处理功能检查：
   - 功能点B2"自定义相机滤镜"：微信不支持自定义相机，降级为"低可行性"
   - 替代方案：使用云函数处理用户上传的图片，返回处理后结果

2. 存储限制检查：
   - 功能点C1"离线文件缓存"：受10MB存储限制影响，从"高"降为"中"
   - 实施条件：添加存储空间管理机制，优先缓存关键数据

3. 渲染性能检查：
   - 功能点A3"复杂数据可视化"：Canvas性能受限，从"中"降为"低"
   - 替代方案：拆分为多个简单图表，或使用云端生成图片方案

4. API兼容性检查：
   - 功能点D1"后台持续定位"：微信限制后台定位，降为"低可行性"
   - 替代方案：改为前台定时定位或基于用户主动触发的定位
```

### 步骤7：质量检查

```
对照原始需求文档，检查功能点覆盖率和准确性：
- 功能点覆盖率：100%
- 技术可行性准确率：95%
- 组件建议合理性：90%
```

### 步骤8：分段创建最终文档

```
为避免工作丢失，分段创建最终文档：
1. 先创建文档框架和第一部分功能点
2. 继续添加后续功能点模块
3. 最后添加技术注意事项和平台考虑因素
```

## 十、总结

> **核心要点**：本规范建立了一套从需求到功能点的系统化转换方法，确保结果的完整、准确和可实施性，可根据不同项目类型持续优化和扩展。

本规范提供了一套系统化方法，用于将非结构化的需求文档转换为开发人员可执行的功能点列表。通过遵循本规范，可以确保需求分解的完整性、准确性和技术导向性，为后续开发工作奠定基础。随着实践经验的积累，可持续优化和完善本规范，使其更好地适应不同类型的项目和技术环境。 